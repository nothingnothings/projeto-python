











-----> PARA COMEÇARMOS, DEVEMOS 



BREVEMENTE REVISAR A 'BIG PICTURE'

da blockchain...












-> NESSE MÓDULO, VEREMOS 






AQUELA PARTE DO 'BROADCASTING',



assim como um 




MECANISMO 

 __ QUE __ GARANTE__ QUE DIFERENTES BLOCKCHAINS CONSIGAM FICAR 'in sync' ------> 









 FAREMOS ISSO PARA ASSEGURAR QUE 

 1 GIVEN NODE NÃO CONSIGA __ USAR/MANIPULAR __ UMA BLOCKCHAIN __ DIFERENTE _ 



 DE ALGUM OUTRO NODE NA NOSSA BLOCKCHAIN... (os outros nodes)...












 ----> PARA COMEÇAR, VEREMOS:











1) COM A FUNCIONALIDADE DE 'COMO ADICIONAR __ NOVOS NODES__ AO NOSSO NODE'... --------> 



OU SEJA,

 ESSENCIALMENTE 'CREATE A LIST/REGISTER' __


 DE TODOS OS NODES CONECTADOS _ AO NOSSO NODE (node do 'user'),






 PEER NODES ------>  ESSE NOSSO NODE __ DEVERÁ _ SER 'INFORMADO' SEMPREQ UE 



 ALGUMA COISA MUDAR 


 NA NOSSA BLOCKCHAIN (

     quando for adicionado 

     um NOVO BLOCK, OU NOVA TRANSACTION
 ) =---------->





 SEMPRE QUANDO ISSO ACONTECER, VAMOS QUERER QUE O PEER NODE SEJA INFORMADO... 















 -> É ISSO QUE VEREMOS AGORA...















 --> PARA COMEÇAR  COM ISSO,







 COM ESSA COISA DE 'NODE',





 PRECISAMOS DE 2 COISAS BÁSICASS 











 __ NO NOSSO CÓDIGO..


















 -----> 1) LÁ NO ARQUIVO 'blockchain',

 PRECISAMOS _ DE UMA _' LIST'__ EM QUE 





 PODEMOS/PODEREMOS FAZER 'MANAGE' DE NOSSOS NODES..










 --> PARA SERMOS MAIS PRECISOS, O PROF NÃO USARÁ UMA 

 LIST, E SIM UM SET (
     para evitar repetições de 


     objects/strings...
 )









 -> VAMOS USAR UM SET PQ __ CADA NODE DEVERÁ __ SER ADICIONADO 'APENAS 1 ÚNICA VEZ',


E COMO UM SET SÓ PODE SEGURAR UNIQUE VALUES,



é o use-case perfeito...












--> LEMBRE-SE:



MAIS CEDO NO CURSO,



NÓS TÍNAMOS UM SET DE 'PARTICIPANTS'... ----------> era quase como UM PLACEHOLDER PARA ESSA 



COISA 

DE 

'set' que estamos mostrando agora.... ------> AGORA VAMOS ADICIONAR O NODE NETWORK DE VERDADE..















--> É POR ISSO QUE O PROFESSOR, LÁ NO '__init__'



de blockchain,









VAI CRIAR UMA PROPRIEDADE DE '


.self.peer_nodes':















-------> DENTRO DISSO, O PROFESOR VAI SETTAR UM VALOR INICIAL DE 'set()' --------> 







VOCê CHAMA/CRIA UM SET __ VAZIO __ POR MEIO DA EXPRESSÃO 'set()'





É POR ISSO QUE FICA TIPO ASSIM:








class Blockchain:

    def __init__(self, hosting_node_id):
        GENESIS_BLOCK = Block('', 0, [], 100, 0)

        self._chain = [GENESIS_BLOCK]
        self.__open_transactions = []
        self.participants = {'Max'}
        self.load_data()
        self.hosting_node = str(hosting_node_id)
        self.nodes = set()














EX:









class Blockchain:

    def __init__(self, hosting_node_id):
        GENESIS_BLOCK = Block('', 0, [], 100, 0)

        self._chain = [GENESIS_BLOCK]
        self.__open_transactions = []
        self.participants = {'Max'}
        self.load_data()
        self.hosting_node = str(hosting_node_id)
        self.peer_nodes = set()
















        --------> CERTO.... E AÍ SEMPRE PODEREMOS ADICIONAR/REMOVE NODES/VALUES DESSE SET AÍ,



        mas se tentarmos ADICIONAR UM MESMO VALOR MAIS DE 1 ÚNICA VEZ,





        ESSE VALUE SERÁ ADICIONADO APENAS 1 ÚNICA VEZ... (ignorada as tentativas)....











        ----> CADA NODE CONSTARÁ NESSA LIST UMA ÚNICA VEZ,


        POR CAUSA DO SET....











        -----> É CLARO QUE LÁ 







        NO 'BLOCKCHAIN',

        PRECISAMOS DE UM METHOD QUE 





NOS PERMITA 'ADICIONAR NOVOS PEER NODES'... --> 















PROFESSOR APONTA QUE 



ESSE ATTRIBUTE de 'peer_nodes'


DEVE SER PRIVATE ('__'),



POR ISSO ELE ESCREVE ASSIM:





class Blockchain:

    def __init__(self, hosting_node_id):
        GENESIS_BLOCK = Block('', 0, [], 100, 0)

        self._chain = [GENESIS_BLOCK]
        self.__open_transactions = []
        self.participants = {'Max'}
        self.load_data()
        self.hosting_node = str(hosting_node_id)
        self.__peer_nodes = set()



-----------------------------------














OK.. AÍ VAMOS PRECISAR DE ALGUMA FUNCIONALIDADE (method )


PARA ADICIONAR/REMOVER NODES...













--> O PROFESSOR ADICIONA ESSA FUNCIONALIDADE BEM AO FINAL DO NOSSO ARQUIVO,







O METHOD DE 






'add_peer_node'... -----> SERÁ ESPERADO O ARGUMENTTO DE 'node',







que será usado em sua lógica.



Fica tipo assim:









class Blockchain:

    def __init__(self, hosting_node_id):
        GENESIS_BLOCK = Block('', 0, [], 100, 0)

        self._chain = [GENESIS_BLOCK]
        self.__open_transactions = []
        self.participants = {'Max'}
        self.load_data()
        self.hosting_node = str(hosting_node_id)
        self.__peer_nodes = set()
        # FileAccess.load_data(self.chain, self.__open_transactions)

    @property
    def chain(self):
        # print('GETTER method called')
        return self._chain[:]

    @chain.setter
    def chain(self, val):
        self._chain = val

    def get_open_transactions(self):
        return self.__open_transactions[:]

    def proof_of_work(self):

        last_block = self._chain[-1]
        last_hash = hash_block(last_block)
        proof = 0

        while not Utility.valid_proof(self.__open_transactions, last_hash, proof):
            proof += 1
        return proof


    def load_data(self):
        """Initialize blockchain + open transactions data from a file."""
        try:
            with open('blockchain.json', mode='r') as f:
                # file_content = pickle.loads(f.read())
                file_content = f.readlines()
                # blockchain = file_content['chain']
                # open_transactions = file_content['ot']
                blockchain = json.loads(file_content[0][:-1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_blockchain = []
                for block in blockchain:
                    converted_tx = [Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender']) for tx in block['processed_transactions']]
                    updated_block = Block(
                        block['previous_block_hash'], block['index'], converted_tx, block['proof'], block['timestamp'])
                    updated_blockchain.append(updated_block)
                self.chain = updated_blockchain
                open_transactions = json.loads(file_content[1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_transactions = []
                for tx in open_transactions:
                    updated_transaction = Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender'])
                    updated_transactions.append(updated_transaction)
                self.__open_transactions = updated_transactions
        except (IOError, IndexError):
            pass
        finally:
            # print('Cleanup!')
            print('')

    def save_data(self):
        """Save blockchain + open transactions snapshot to a file."""
        try:
            with open('blockchain.json', mode='w') as f:
                saveable_chain = [block.__dict__ for block in [Block(block_el.previous_block_hash, block_el.index, [
                    tx.__dict__ for tx in block_el.processed_transactions], block_el.proof, block_el.timestamp) for block_el in self.chain]]
                f.write(json.dumps(saveable_chain))
                f.write('\n')
                saveable_tx = [tx.__dict__ for tx in self.__open_transactions]

                for transaction in saveable_tx:
                    transaction['sender'] = str(transaction['sender'])

                
                print(saveable_tx, 'PRINTTRANSACTIONS')


                f.write(json.dumps(saveable_tx))

                # save_data = {
                #     'chain': blockchain,
                #     'ot': open_transactions
                # }
                # f.write(pickle.dumps(save_data))
        except IOError:
            print('Saving failed!')



    def get_value(self, person):
        print(self.chain, 'LINE414114')
        print([[transaction.amount for transaction in block.processed_transactions if getattr(transaction, person) == self.hosting_node] for block in self.chain])
        return [[transaction.amount for transaction in block.processed_transactions if getattr(transaction, person) == self.hosting_node] for block in self.chain]


    def get_balance(self):

        participant = self.hosting_node


        transaction_sender = self.get_value('sender')

        print(transaction_sender, 'LINE2')

        open_transactions_sender = [transaction.amount
                                    for transaction in self.get_open_transactions() if transaction.sender == participant]

        transaction_sender.append(open_transactions_sender)

        # print(transaction_sender[0])

        # print(transaction_sender)

        amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt)
                             if len(tx_amt) > 0 else tx_sum + 0, transaction_sender, 0)

        

        # print(amount_sent)

        transaction_recipient = self.get_value('recipient')

        amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt)
                                 if len(tx_amt) > 0 else tx_sum + 0, transaction_recipient, 0)

        print(amount_received - amount_sent, 'LINEr')
        # print(amount_received)
        return (amount_sent, amount_received, amount_received - amount_sent)





    def mine_block(self):
        """É essa função que PROCESSA NOSSAS OPEN TRANSACTIONS, PARA ENTÃO ADICIONAR UM NOVO BLOCK À BLOCKCHAIN """

        previous_block = self._chain[-1]
        # print(previous_block)

        hashed_block = hash_block(previous_block)
        print(hashed_block)
        print(hashed_block)

        proof = self.proof_of_work()
        print(self.hosting_node, 'HOSTNODE')
        reward_transaction = Transaction(
            MINING_REWARD, self.hosting_node, 'signature', 'ourApp')

        copied_transactions = self.__open_transactions[:]


        for transaction in copied_transactions:
            if (not Wallet.verify_transaction(transaction)):
                self.__open_transactions.remove(transaction)
                return False

        copied_transactions.append(reward_transaction)
        print(copied_transactions, 'COPIED_TRANSACTIONS')
        
        block = Block(hashed_block, len(self._chain),
                      copied_transactions, proof)
        
        
 


        self._chain.append(block)
        self.__open_transactions = []
        self.save_data()

        # FileAccess.save_data(self._chain, self.__open_transactions)
        # FileAccess.save_data(self._chain, copied_transactions)

        # print(self._chain, 'TRIED TO MINE BLOCK')
        return True

    # def add_transaction(self, sender, recipient, amount=1.0):
    def add_transaction(self, sender, recipient, signature, amount=1.0):
        """Faz append de uma NOVA TRANSACTION À LIST DE ' open_transactions, e aí RETORNA TRUE OU FALSE, a depender do sucesso de seu códiogo --> verification para ver se o user pode ou naõ realizar essa operação/send de coins...'....

            Arguments:
        :sender: o sender da transaction (nome ou id)   
        :recipient: o receiver da transaction (nome ou id)
        :signature: a SIGNATURE DE CADA TRANSACTION
        :amount: a quantidade (DEVE SER UM FLOAT). DEFAULT É 1.0 coin ...            
        """






        new_transaction = Transaction(amount, recipient, signature, sender)


        # if (not Wallet.verify_transaction(new_transaction)): ##redundante (já temos esse check no method call logo abaixo, de 'Utility')..
        #     return False

        if not Utility.verify_transaction(new_transaction, self.get_balance):
            # print('Your funds are not enough for the chosen operation')
            print('INVALID')
            return False
        else:
            print('VALID')
            self.__open_transactions.append(new_transaction)
            self.participants.add(sender)
            self.participants.add(recipient)
            print(self.__open_transactions)

            # FileAccess.save_data(self._chain, self.__open_transactions)
            # FileAccess.save_data(self._chain, self.get_open_transactions())
            self.save_data()
            return True
    
    def add_peer_node(node):
        """Adds a new node to the peer node set."""













----------------------------








EX:








    def add_peer_node(self, node):
        """Adds a new node to the peer node set."""



















        --> OS ARGUMENTS SERÃO 


        'node'  --> 'The node URL which should be added' 











        ---> NESSE SET, PORTANTO,  ADICIONAREMOS O IP ADDRESS/URL 

        DO NODE 



        QUE SERÁ/FOI ADICIONADO....






        eX:



            def add_peer_node(self, node):
        """Adds a new node to the peer node set.
        
        
        
            Arguments:
            :node: The node URL which should be added.
        
        
        """










EX:






    
    def add_peer_node(self, node):
        """Adds a new node to the peer node set.
        
        Arguments:
            :node: The node URL which should be added.
        """









---> OK... O QUE VAMOS QUERER EXECUTAR É O METHOd 


DE 



'__peer_nodes.ADD()',




pq '.add()'


É UM METHOD QUE 

EXISTE DENTRO DE TODOS OS SETS,


QUE NOS 

DEIXA 




_ ADICIONAR_ VALUES/ELEMENTOS AO SEU INTERIOR....








ex:






    
    def add_peer_node(self, node):
        """Adds a new node to the peer node set.
        
        Arguments:
            :node: The node URL which should be added.
        """
        self.__peer_nodes.add(node)













---> ISSO FEITO, O PROFESSOR VAI QUERER CHAMAR 'self.save_data()' 





PQ ELE _ TAMBÉM 



VAI QUERER 




'SAVE THE CONNECTED NODES LIST' 




ao NOSSO ARQUIVO 




DEFAULT DE TEXTO  'blockchain.json'...







-----> É CLARO QUE 


ISSO __ SIGNIFICA QUE __ VAMOS TER QUE _ AJUSTAR 



'save_data()',



PQ POR ENQUANTO SUA LÓGICA É APENAS ISTO:




    def save_data(self):
        """Save blockchain + open transactions snapshot to a file."""
        try:
            with open('blockchain.json', mode='w') as f:
                saveable_chain = [block.__dict__ for block in [Block(block_el.previous_block_hash, block_el.index, [
                    tx.__dict__ for tx in block_el.processed_transactions], block_el.proof, block_el.timestamp) for block_el in self.chain]]
                f.write(json.dumps(saveable_chain))
                f.write('\n')
                saveable_tx = [tx.__dict__ for tx in self.__open_transactions]

                for transaction in saveable_tx:
                    transaction['sender'] = str(transaction['sender'])

                
                print(saveable_tx, 'PRINTTRANSACTIONS')


                f.write(json.dumps(saveable_tx))

                # save_data = {
                #     'chain': blockchain,
                #     'ot': open_transactions
                # }
                # f.write(pickle.dumps(save_data))
        except IOError:
            print('Saving failed!')

















------> VAMOS QUERER QUE ELE SALVE TAMBÉM 

OS 

'nodes' conectados ao nosso 'NODE '(node do usuário)....








--> o method de 'save_data'


ainda 

NÃO ESTÁ SALVANDO A INFO ACERCA DOS NODES,



POR ISSO TEMOS QUE AJUSTÁ-LO....





ex:




    def save_data(self):
        """Save blockchain + open transactions snapshot to a file."""
        try:
            with open('blockchain.json', mode='w') as f:
                saveable_chain = [block.__dict__ for block in [Block(block_el.previous_block_hash, block_el.index, [
                    tx.__dict__ for tx in block_el.processed_transactions], block_el.proof, block_el.timestamp) for block_el in self.chain]]
                f.write(json.dumps(saveable_chain))
                f.write('\n')
                saveable_tx = [tx.__dict__ for tx in self.__open_transactions]
                for transaction in saveable_tx:
                    transaction['sender'] = str(transaction['sender'])
                f.write(json.dumps(saveable_tx))
                f.write('\n')
                f.write(json.dumps(self.__peer_nodes))
                
        except IOError:
            print('Saving failed!')



















  --------> certo... mas antes de salvarmos esse set aí,



  professor diz que devemos 'PRIMEIRAMENTE CONVERTER 




  ESSE SET EM UMA list'..  ------------>







  fazemos isso com a escrita 




list(nomeDoSet)









-> OK, ISSO SIGNIFICA QUE SERÁ ESCRITA UMA LISTA DE NODES ('a lista de nodes') NA ÚLTIMA LINHA DE NOSSO 

ARQUIVO DE TEXTO/JSON..











-> TAMBÉM PRECISAMOS AJUSTAR O METHOD DE 'load_data',

PQ 

ESSE METHOD 





DEVERÁ _ CARREGAR TAMBÉM A LISTA DE NODES QUE VAMOS ESCREVER DENTRO DE CADA ARQUIVO DE TEXTo...






eX:






    def load_data(self):
        """Initialize blockchain + open transactions data from a file."""
        try:
            with open('blockchain.json', mode='r') as f:
                # file_content = pickle.loads(f.read())
                file_content = f.readlines()
                # blockchain = file_content['chain']
                # open_transactions = file_content['ot']
                blockchain = json.loads(file_content[0][:-1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_blockchain = []
                for block in blockchain:
                    converted_tx = [Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender']) for tx in block['processed_transactions']]
                    updated_block = Block(
                        block['previous_block_hash'], block['index'], converted_tx, block['proof'], block['timestamp'])
                    updated_blockchain.append(updated_block)
                self.chain = updated_blockchain
                open_transactions = json.loads(file_content[1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_transactions = []
                for tx in open_transactions:
                    updated_transaction = Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender'])
                    updated_transactions.append(updated_transaction)
                self.__open_transactions = updated_transactions
                peer_nodes = json.loads(file_content[2])
                self.__peer_nodes = peer_nodes
        except (IOError, IndexError):
            pass
        finally:
            # print('Cleanup!')
            print('')

















----------->  MAS É CLARO QUE AQUI AS COISAS NÃO SÃO TÃO SIMPLES... --> 


DEVEMOS REALIZAR OUTRA MUDANÇA,


DESSA VEZ SOBRE 


AQUELE CÓDIGO QUE CARREGA AS open_transactions:










open_transactions = json.loads(file_content[1])











-> É CLARO, PRECISAMOS REMOVER O ÚLTIMO '\n' 





que passará a EXISTIR NESSA LINHA (pq pulamos essa linha para 


escrever aquele 'peer_nodes', na terceira linha)....









------> para isso, precisamos daquele uso do range selector,

tipo assim:



           peer_nodes = json.loads(file_content[2][:-1])












----------------------------------








--> É CLARO QUE __ VAMOS QUERER __ CRIAR 1 SET A PARTIR DESSA DATA QUE FOI CARREGADA,

POR ISSO WRAPPAMSO O 

'peer_nodes'


em um 'set()'..




ex:









    def load_data(self):
        """Initialize blockchain + open transactions data from a file."""
        try:
            with open('blockchain.json', mode='r') as f:
                # file_content = pickle.loads(f.read())
                file_content = f.readlines()
                # blockchain = file_content['chain']
                # open_transactions = file_content['ot']
                blockchain = json.loads(file_content[0][:-1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_blockchain = []
                for block in blockchain:
                    converted_tx = [Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender']) for tx in block['processed_transactions']]
                    updated_block = Block(
                        block['previous_block_hash'], block['index'], converted_tx, block['proof'], block['timestamp'])
                    updated_blockchain.append(updated_block)
                self.chain = updated_blockchain
                open_transactions = json.loads(file_content[1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_transactions = []
                for tx in open_transactions:
                    updated_transaction = Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender'])
                    updated_transactions.append(updated_transaction)
                self.__open_transactions = updated_transactions
                peer_nodes = json.loads(file_content[2][:-1])
                self.__peer_nodes = set(peer_nodes)
        except (IOError, IndexError):
            pass
        finally:
            # print('Cleanup!')
            print('')













--------> certo...








--> ISSO VAI ARMAZENAR OS NODES QUE ESTAMOS CARREGANDO,



DIRETAMENTE NESSE 'peer_nodes' attribute de 


nossa blockchain...








--> OK.. COM ISSO NOS TORNAMOS CAPAZES DE 'CREATE' E 'SAVE OUR NODES'...







EX:








    def load_data(self):
        """Initialize blockchain + open transactions data from a file."""
        try:
            with open('blockchain.json', mode='r') as f:
                # file_content = pickle.loads(f.read())
                file_content = f.readlines()
                # blockchain = file_content['chain']
                # open_transactions = file_content['ot']
                blockchain = json.loads(file_content[0][:-1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_blockchain = []
                for block in blockchain:
                    converted_tx = [Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender']) for tx in block['processed_transactions']]
                    updated_block = Block(
                        block['previous_block_hash'], block['index'], converted_tx, block['proof'], block['timestamp'])
                    updated_blockchain.append(updated_block)
                self.chain = updated_blockchain
                open_transactions = json.loads(file_content[1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_transactions = []
                for tx in open_transactions:
                    updated_transaction = Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender'])
                    updated_transactions.append(updated_transaction)
                self.__open_transactions = updated_transactions
                peer_nodes = json.loads(file_content[2][:-1])
                self.__peer_nodes = set(peer_nodes)
        except (IOError, IndexError):
            pass
        finally:
            # print('Cleanup!')
            print('')


















    ------> OK... AÍ TAMBÉM VAMOS ACRESCENTAR UM METHOD QUE 'REMOVES NODES' .... -> 




    method que será usado para EXCLUIR NODES DE NOSSO SET...









    -> tipo assim:







    def remove_peer_node(self, node):
        self.__peer_nodes.discard(node)
        print('REMOVED NODES')









--> O METHOD DE 'discard' NOS PERMITE REMOVER UM VALUE DE NOSSO  SET --> E SE O VALOR 




PASSADO A 'discard()'


NÃO EXISTIR,

ELE AINDA ASSIM NÃO VAI DAR THROW DE UM ERROR...














--> POR FIM, É CLARO QUE CHAMAREMOS 'save_data()'



mais uma vez,



PQ VAMOS QUERER SALVAR ESSA 'EXCLUSÃO'


no nosso arquivo blockchain..








Ex:










    def remove_peer_node(self, node):
        """Removes a node from the peer node set.
        
        Arguments:
            :node: The node URL which should be removed.
        """
        self.__peer_nodes.discard(node)
        self.save_data() ###salva a updated node list na nossa TEXT FILE...
        print('REMOVED NODES')












-----------> COM ISSO, NOSSO ARQUIVO BLOCKCHAIN DEVE ESTAR PREPARADO...









--> AGORA PRECISAMOS EXPOR ALGUNS ENDPOINTS A QUE PODEREMOS ENVIAR REQUESTS PARA TRIGGAR 




ESSES METHODS...