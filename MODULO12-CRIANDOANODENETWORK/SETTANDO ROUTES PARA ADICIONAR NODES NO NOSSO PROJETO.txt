














----> NOSSO CÓDIGO DE 'blockchain' já foi manipulado um pouco, 

pq agora 


temos methods que ADICIONAM 'nodes' (em um 'SET', e em arquivos de text em cada 'node')...:





class Blockchain:

    def __init__(self, hosting_node_id):
        GENESIS_BLOCK = Block('', 0, [], 100, 0)

        self._chain = [GENESIS_BLOCK]
        self.__open_transactions = []
        self.participants = {'Max'}
        self.load_data()
        self.hosting_node = str(hosting_node_id)
        self.__peer_nodes = set()
        # FileAccess.load_data(self.chain, self.__open_transactions)

    @property
    def chain(self):
        # print('GETTER method called')
        return self._chain[:]

    @chain.setter
    def chain(self, val):
        self._chain = val

    def get_open_transactions(self):
        return self.__open_transactions[:]

    def proof_of_work(self):

        last_block = self._chain[-1]
        last_hash = hash_block(last_block)
        proof = 0

        while not Utility.valid_proof(self.__open_transactions, last_hash, proof):
            proof += 1
        return proof


    def load_data(self):
        """Initialize blockchain + open transactions data from a file."""
        try:
            with open('blockchain.json', mode='r') as f:
                # file_content = pickle.loads(f.read())
                file_content = f.readlines()
                # blockchain = file_content['chain']
                # open_transactions = file_content['ot']
                blockchain = json.loads(file_content[0][:-1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_blockchain = []
                for block in blockchain:
                    converted_tx = [Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender']) for tx in block['processed_transactions']]
                    updated_block = Block(
                        block['previous_block_hash'], block['index'], converted_tx, block['proof'], block['timestamp'])
                    updated_blockchain.append(updated_block)
                self.chain = updated_blockchain
                open_transactions = json.loads(file_content[1])
                # We need to convert  the loaded data because Transactions should use OrderedDict
                updated_transactions = []
                for tx in open_transactions:
                    updated_transaction = Transaction(
                        tx['amount'], tx['recipient'], tx['signature'], tx['sender'])
                    updated_transactions.append(updated_transaction)
                self.__open_transactions = updated_transactions
                peer_nodes = json.loads(file_content[2][:-1])
                self.__peer_nodes = set(peer_nodes)
        except (IOError, IndexError):
            pass
        finally:
            # print('Cleanup!')
            print('')

    def save_data(self):
        """Save blockchain + open transactions snapshot to a file."""
        try:
            with open('blockchain.json', mode='w') as f:
                saveable_chain = [block.__dict__ for block in [Block(block_el.previous_block_hash, block_el.index, [
                    tx.__dict__ for tx in block_el.processed_transactions], block_el.proof, block_el.timestamp) for block_el in self.chain]]
                f.write(json.dumps(saveable_chain))
                f.write('\n')
                saveable_tx = [tx.__dict__ for tx in self.__open_transactions]
                for transaction in saveable_tx:
                    transaction['sender'] = str(transaction['sender'])
                f.write(json.dumps(saveable_tx))
                f.write('\n')
                f.write(json.dumps(list(self.__peer_nodes)))  ##writtamos uma LISTA de nossos nodes, contidos dentro do set de 'peer_nodes'...
                

                # save_data = {
                #     'chain': blockchain,
                #     'ot': open_transactions
                # }
                # f.write(pickle.dumps(save_data))
        except IOError:
            print('Saving failed!')



    def get_value(self, person):
        print(self.chain, 'LINE414114')
        print([[transaction.amount for transaction in block.processed_transactions if getattr(transaction, person) == self.hosting_node] for block in self.chain])
        return [[transaction.amount for transaction in block.processed_transactions if getattr(transaction, person) == self.hosting_node] for block in self.chain]


    def get_balance(self):

        participant = self.hosting_node


        transaction_sender = self.get_value('sender')

        print(transaction_sender, 'LINE2')

        open_transactions_sender = [transaction.amount
                                    for transaction in self.get_open_transactions() if transaction.sender == participant]

        transaction_sender.append(open_transactions_sender)

        # print(transaction_sender[0])

        # print(transaction_sender)

        amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt)
                             if len(tx_amt) > 0 else tx_sum + 0, transaction_sender, 0)

        

        # print(amount_sent)

        transaction_recipient = self.get_value('recipient')

        amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt)
                                 if len(tx_amt) > 0 else tx_sum + 0, transaction_recipient, 0)

        print(amount_received - amount_sent, 'LINEr')
        # print(amount_received)
        return (amount_sent, amount_received, amount_received - amount_sent)





    def mine_block(self):
        """É essa função que PROCESSA NOSSAS OPEN TRANSACTIONS, PARA ENTÃO ADICIONAR UM NOVO BLOCK À BLOCKCHAIN """

        previous_block = self._chain[-1]
        # print(previous_block)

        hashed_block = hash_block(previous_block)
        print(hashed_block)
        print(hashed_block)

        proof = self.proof_of_work()
        print(self.hosting_node, 'HOSTNODE')
        reward_transaction = Transaction(
            MINING_REWARD, self.hosting_node, 'signature', 'ourApp')

        copied_transactions = self.__open_transactions[:]


        for transaction in copied_transactions:
            if (not Wallet.verify_transaction(transaction)):
                self.__open_transactions.remove(transaction)
                return False

        copied_transactions.append(reward_transaction)
        print(copied_transactions, 'COPIED_TRANSACTIONS')
        
        block = Block(hashed_block, len(self._chain),
                      copied_transactions, proof)
        
        
 


        self._chain.append(block)
        self.__open_transactions = []
        self.save_data()

        # FileAccess.save_data(self._chain, self.__open_transactions)
        # FileAccess.save_data(self._chain, copied_transactions)

        # print(self._chain, 'TRIED TO MINE BLOCK')
        return True

    # def add_transaction(self, sender, recipient, amount=1.0):
    def add_transaction(self, sender, recipient, signature, amount=1.0):
        """Faz append de uma NOVA TRANSACTION À LIST DE ' open_transactions, e aí RETORNA TRUE OU FALSE, a depender do sucesso de seu códiogo --> verification para ver se o user pode ou naõ realizar essa operação/send de coins...'....

            Arguments:
        :sender: o sender da transaction (nome ou id)   
        :recipient: o receiver da transaction (nome ou id)
        :signature: a SIGNATURE DE CADA TRANSACTION
        :amount: a quantidade (DEVE SER UM FLOAT). DEFAULT É 1.0 coin ...            
        """






        new_transaction = Transaction(amount, recipient, signature, sender)


        # if (not Wallet.verify_transaction(new_transaction)): ##redundante (já temos esse check no method call logo abaixo, de 'Utility')..
        #     return False

        if not Utility.verify_transaction(new_transaction, self.get_balance):
            # print('Your funds are not enough for the chosen operation')
            print('INVALID')
            return False
        else:
            print('VALID')
            self.__open_transactions.append(new_transaction)
            self.participants.add(sender)
            self.participants.add(recipient)
            print(self.__open_transactions)

            # FileAccess.save_data(self._chain, self.__open_transactions)
            # FileAccess.save_data(self._chain, self.get_open_transactions())
            self.save_data()
            return True
    
    def add_peer_node(self, node):
        """Adds a new node to the peer node set.
        
        Arguments:
            :node: The node URL which should be added.
        """

        self.__peer_nodes.add(node)   ##'.add()' é um method que existe DENTRO DE SETS...
        self.save_data()

    def remove_peer_node(self, node):
        """Removes a node from the peer node set.
        
        Arguments:
            :node: The node URL which should be removed.
        """
        self.__peer_nodes.discard(node)
        self.save_data() ###salva a updated node list na nossa TEXT FILE...
        print('REMOVED NODES')



        

----------------------------------------















--> ok.. aí vamos até o  'node.py'



E __ VAMOS DEFINIR ALGUMAS ROUTES_ 


QUE VÃO NOS DEIXAR 'ADD/REMOVE NODES'...













--> o professor vai fazer isso ao final do arquivo...













--> ele adiciona uma nova function/route,


que será 



'add_node'...









-----> ESSA FUNCTION VAI RECEBER O DECORATOR 


de 



@app.route('/node', methods=['POST'])













--> COMO QUEREMOS ADICIONAR ALGO NO NOSSO SERVER, VAMOS QUERER USAR 

O METHOD DE 'Post':




@app.route('/node', methods=['POST'])
def add_node():
    blockchain.add_peer_node()















    ---> VAI SER ALGO TIPO ASSIM.... -> MAS É CLARO QUE PRECISAMOS DO ARGUMENTO 'node',

    que será 

    tirado de algum lugar....









    -----> O PROFESSOR DIZ QUE PRECISAMOS FAZER 

    ALGUMAS COISAS DENTRO DESSE METHOD/ROUTE...











    --> vamos querer receive o 'node' em que __ ESTAMOS__ como argumento..









    ---> PRECISAMOS __ EXTRAIR_ ESSE VALOR...



    -> CERTO, MAS EM QUE 

    LUGAR ESSE VALOR É DEPOSITADO? 




    (
        só sei que quando entramos no app AGORA,


        nós recebemos uma WALLET COM UMA PUBLIC KEY (que deveria ser esse 'node' aí, node name)..
    )








    ------> bem.... o professor nos explica que 



    ESSE VALUE DE 'node'



    VAI __ ESTAr__ INSERIDO __ DENTRO __ DE 


    NOSSO REQUEST DO FRONTEND...









    -> e podemos extrair esse value por meio do call de 




    values = request.get_json()




'request' --> vem lá do pacote de 'flask'....








    -----> certo.... --> mas é claro que vamos ter que 



    ADICIONAR ALGUMA KEY DE 


    'node' 


    DENTRO DE ESSE REQUEST DE TIPO 'Post' 

    

    enviado ao nosso server...














    -----> O INCOMING REQUEST __ TERÁ __ 


    DE SER 



    DE _ JSON DATA..--> vai nos enviar JSON DATA OBRIGATORIAMENTE (vamos definir isso)...









    --> CASO O REQUEST NÃO SEJA DE 'JSON DATA',


    esse method de 


    request.get_json()


    VAI FALHAR...










    ----> COM ISSO, DEVEMOS CHECAR SE TEMOS 



    'values.node',


    ou algo assim.... --> SE NAÕ TIVERMOS 




    ESSE NODE,



    DEVEMOS RETORNAR UMA RESPONSE 


    DIZENDO 


    'response = {



        'message': 'No data attached.'
    }
    '







    return jsonify(response), 400












    EX:









@app.route('/node', methods=['POST'])
def add_node():
    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403

    blockchain.add_peer_node()
















    --> OBS: usamos 'node' in values 


    EM VEZ DE 



    'not values.node' 





    PQ 



    'values' SERÁ OBRIGATORIAMENTE UM 'DICT' por conta do flask,

    o que quer dizer que 
    SÓ PODEMOS CHECAR 

    AS COISAS DENTRO DELES POR MEIO DE '['nomeDaKey']'













    -----> certo...









EX:










@app.route('/node', methods=['POST'])
def add_node():
    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403

    blockchain.add_peer_node()

















--> se passamos por esses 2 checks, sabemos que 



temos um 

REQUEST EM FORMATO JSON,

E QUE TEMOS 

UM NODE NESSE REQUEST...











-> É POR ISSO QUE PODEREMOS EXTRAIR ESSE NODE,




por meio 







da escrita de 




node = values.get('node')











----> 'values.get(...)'



ESSA É UMA MANEIRA __ DE EXTRAIR UM VALUE_ DE UM REQUESt__ 



FEITO DIRETAMENTE AO FLASK...









ESSA ESCRITA É A MESMA COISA QUE ISTO:


node = values['node']














ESSE SERÁ O NODE QUE QUEREMOS ADICIONAR, POR ISSO ESCREVEMOS:






@app.route('/node', methods=['POST'])
def add_node():
    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403
    # node = values.get('node') ##mesma coisa que o código de baixo...
    node = values['node']
    blockchain.add_peer_node(node)




--------------------------- 










IMPORTANTE!!!!! --> NÃO ESTAMOS PRECISANDO DE NENHUMA 'WALLET'

PARA 


ADICIONAR ESSE 'NODE' 




AO NOSSO BLOCKCHAIN.... -------> ISSO SIGNIFICA QUE ISSO (o set de um novo node no webserver)




PODE SER FEITO __ ATÉ MESMO _ SE VOCê AINDA NÃO TIVER SETTADO UMA WALLET..













--> É CLARO QUE VOCÊ PODE MUDAR ESSE COMPORTAMENTO:



VOCÊ PODE __ FORÇAR__ SEUS USERS A TER UMA WALLET (


na verdade, podemos restringir o acesso a QUALQUER UMA DE NOSSAS NODE APIs,



restringi-las apenas àquelas que possuem uma wallet 'setup'...

)









-------> FAÇO ISSO, COLOCO O CHECK POR UMA WALLET...






EX>:










@app.route('/node', methods=['POST'])
def add_node():

    if (not wallet.public_key != None):
        return 'Please ensure that a wallet was loaded.', 403

        
    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403
    # node = values.get('node') ##mesma coisa que o código de baixo...
    node = values['node']
    blockchain.add_peer_node(node) ##isso poderá ser feito _ MESMO __ SEM TENDO UMA WALLET inicialmente...














----> COM O NODE ADICIONADO, PODEMOS PREPARAR UMA RESPONSE ,


EM QUE DIZEMOS 

'message': 'Node Added successfully'....











@app.route('/node', methods=['POST'])
def add_node():

    if (not wallet.public_key != None):
        return 'Please ensure that a wallet was loaded.', 403

        
    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403
    # node = values.get('node') ##mesma coisa que o código de baixo...
    node = values['node']
    blockchain.add_peer_node(node) ##isso poderá ser feito _ MESMO __ SEM TENDO UMA WALLET inicialmente...
    response = {
        'message': 'Node added successfully',
        'all_nodes': 
    }














--> EM 'all_nodes',



VAMOS QUERER __ SIMPLESMENTE__ EXTRAIR TODOS OS NODES..














--> PÁRA ISSO, PRECISAMOS PROVIDENCIAR UM METHOD QUE 


'retorne a lista inteira de nodes'


LÁ NA NOSSA BLOCKCHAIN..









-> talvez 'get_nodes'...







ex:






def get__peer_nodes(self) {
    return self._peer_nodes
}







FICA TIPO ASSIM, MAS DÁ ERRO:


    def get_peer_nodes(self) {
        """
        Return a list of all connected peer nodes
        """
        return self.__peer_nodes[:]

            }











        ex:

    def get_peer_nodes(self):
        """
        Return a list of all connected peer nodes
        """
        return self.__peer_nodes[:]

        













        --> esse method é colocado DENTRO DO 'blockchain.py', da class 'Blockchain'...













--> OK.... AÍ CHAMAMOS ISSO LÁ NA NOSSA API ROUTE/ENDPOINT:





@app.route('/node', methods=['POST'])
def add_node():

    if (not wallet.public_key != None):
        return 'Please ensure that a wallet was loaded.', 403

    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403
    # node = values.get('node') ##mesma coisa que o código de baixo...
    node = values['node']
    blockchain.add_peer_node(node) ##isso poderá ser feito _ MESMO __ SEM TENDO UMA WALLET inicialmente...
    
    nodes = list(blockchain.get_peer_nodes()) ##wrappamos isso para conseguir uma LIST a partir do SET que é retornado por esse method...
    response = {
        'message': 'Node added successfully.',
        'all_nodes': nodes
    }
    return jsonify(response), 201





--------------------------








agora é hora de 

experimentar esse código aí....











--> ATIVE SEU VIRTUAL ENVIRONMENT, TUDO NORMAL....








--> use anaconda, etc etc...









----> com isso ativado,





execute o arquivo node.py para rodar o server...









--> VAMOS USAR O POSTMAN, PQ AINDA NÃO TEMOS ESSA route na nossa ui (sem botão para isso/link para isso)









--> ok... no postman,

deixamos 'localhost:5000',



e aí colocamos 



'node'... ->  




aí 

colocamos 


'Post'... ---> 













no request body,


colocamos ESTA JSON DATA:




{

"node": "http://localhost:5000/1"

}



(


    pq o 'node' deverá ser uma URL VÁLIDA A UM 


    DOS 'nodes' de nosso app..
)









--> o professor ganha um erro de 'object is not subscriptable'










--> mas eu não ganhei esse erro....










-> OK.. MAS NA VERSAÕ DO PROFESSOR, ELE CONSEGUIU 


'NODE ADDED successfully' --> sinal de que HÁ ALGO DE ERRADO NO NOSSO CÓDIGO....












na verdade, professor substitui o código de 



'return self.__peer_nodes[:]' 








por 


'return list(self.__peer_nodes)',






pq isso aí 
vai essencialmente NOS DAR UMA NOVA LIST,



que vai ser copiada a partir desse set de '__peer_nodes'...













-> mesmo assim, estou recebendo um erro 403 





no meu node... --> é pq não tenho uma 'wallet' settupada..



--> reveja o código da route de /node:







@app.route('/node', methods=['POST'])
def add_node():

    if (not wallet.public_key != None):
        return 'Please ensure that a wallet was loaded.', 403

    values = request.get_json()

    if (not values):
        response = {
            'message': 'No data attached.'
        }
        return jsonify(response), 400
    if ('node' not in values):
        response = {
            'message': 'No node detected in the request.'
        }
        return jsonify(response), 403
    # node = values.get('node') ##mesma coisa que o código de baixo...
    node = values['node']
    blockchain.add_peer_node(node) ##isso poderá ser feito _ MESMO __ SEM TENDO UMA WALLET inicialmente...
    
    nodes = blockchain.get_peer_nodes ## isso será uma list/array....
    response = {
        'message': 'Node added successfully.',
        'all_nodes': nodes
    }
    return jsonify(response), 201















-> aquele primeiro if block é o responsável por nosso erro....







--> posso só omitir esse código aí,

para que consiga acessar o resto da lógica...













-- >bem, ganhei OUTRO ERROr:


TypeError: Object of type method is not JSON serializable












ERA UM ERRO DE falta de '()' no call do method de 'get_peer_nodes'...












-> DEU, FUNCIONOU... O CÓDIGO FICOU ASSIM (em blockchain.json):




127.0.0.1 - - [19/Apr/2022 00:50:08] "POST /node HTTP/1.1" 201 -






[{"previous_block_hash": "", "index": 0, "processed_transactions": [], "proof": 100, "timestamp": 0}]
[]
["http://localhost:5000/1"]








---------------------------------------















----> e podemos ir adicionando novos nodes, veja:



[{"previous_block_hash": "", "index": 0, "processed_transactions": [], "proof": 100, "timestamp": 0}]
[]
["http://localhost:5000/2", "http://localhost:5000/1"]













-> OK... ISSO QUER DIZER QUE JÁ CONSEGUIMOS 'ADD NODES'...











-> agora vamos adicionar uma route que vai nos deixar também 'remove nodes'..