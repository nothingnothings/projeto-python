














----> UM DETALHE EXTRA SOBRE 'WHILE' E 'FOR' LOOPS...












--_> UMA FEATURE QUE AMBOS TÊM,






MAS QUE VOCÊ NÃO VÊ COM TANTA FREQUÊNCIA,

É QUE 


VOCÊ 


PODE 


ESPECIFICAR UM 'ELSE CASE'




nos 




loops...












--> usaremos como exemplo o 'while loop':











waiting_for_input = True




while waiting_for_input: #approach que usa o SET DE 'global waiting_for_input = False' COMO FORMA DE ENCERRAR A EXECUÇÃO DESSE WHILE LOOP...
    print('------------------------------')
    print('1: Add a new transaction value')
    print('2: Display current blockchain')
    print('h: Manipulate the chain')
    print('q: Quit the program')
    print('------------------------------')
    user_input = get_user_choice()
    if(user_input == '1'):
        tx_amount = get_user_transaction_input()
        if(tx_amount == None):
            print('Please enter a valid value')
        else: 
            add_value(tx_amount, get_last_blockchain_value())
    elif(user_input == '2'):
        output_blockchain()
    elif(user_input == 'q'):
        waiting_for_input = False
        # break
    elif(user_input == 'h'):
        elementIndex = input(
            'Enter the number of the element you want to manipulate: ')
        if (elementIndex.isnumeric()):
            if (len(blockchain) >= int(elementIndex) + 1):
                elementValue = input(' Please Enter the value you want to insert: ')
                blockchain[int(elementIndex)] = [float(elementValue)]
            else:
                print(
                    'No block for that index, please insert sufficient number of blocks before trying to manipulate a specific one')
        else:
            print('Invalid index entered, please try again')
    else:
        print('----------------------------------------')
        print('Invalid command, please input 1, 2 or q.')
    if(not verify_chain()):
        print(verify_chain())
        print('Blockchain was found invalid.')
        print(blockchain)
        waiting_for_input = False
        # break
    else:
        print('Blockchain is valid')
    print(blockchain)
    # print('Choice registered')























--> DEPOIS DO NOSSO LOOP,

NO MESMO NÍVEL DA KEYWORD 'while',





PODEMOS _ _ADICIONAR 'ELSE' -------> (exatamente como visto no if statement)....











----> O QUE O PROFESSOR ESCREVERÁ É 




'else:
    print('User left!')















    ------> SALVAMOS ISSO E AÍ 

    EXECUTAMOS 







    NOSSO ARQUIVO...








    --> quando fizermos isso,





    e aí quando QUITTARMOS NOSSO APP, com 'q',


    VEREMOS 



    'User left'

    OUTPUTTADO NO CONSOLE..







    ex:





    
    

waiting_for_input = True



# while True: ///approach que usava 'breaks' para PARAR NOSSO CÓDIGO _ QUANDO ACONTECIA UM ERRO/APP ERA ENCERRADO....
while waiting_for_input: #approach que usa o SET DE 'global waiting_for_input = False' COMO FORMA DE ENCERRAR A EXECUÇÃO DESSE WHILE LOOP...
    print('------------------------------')
    print('1: Add a new transaction value')
    print('2: Display current blockchain')
    print('h: Manipulate the chain')
    print('q: Quit the program')
    print('------------------------------')
    user_input = get_user_choice()
    if(user_input == '1'):
        tx_amount = get_user_transaction_input()
        if(tx_amount == None):
            print('Please enter a valid value')
        else: 
            add_value(tx_amount, get_last_blockchain_value())
    elif(user_input == '2'):
        output_blockchain()
    elif(user_input == 'q'):
        waiting_for_input = False
        # break
    elif(user_input == 'h'):
        elementIndex = input(
            'Enter the number of the element you want to manipulate: ')
        if (elementIndex.isnumeric()):
            if (len(blockchain) >= int(elementIndex) + 1):
                elementValue = input(' Please Enter the value you want to insert: ')
                blockchain[int(elementIndex)] = [float(elementValue)]
            else:
                print(
                    'No block for that index, please insert sufficient number of blocks before trying to manipulate a specific one')
        else:
            print('Invalid index entered, please try again')
    else:
        print('----------------------------------------')
        print('Invalid command, please input 1, 2 or q.')
    if(not verify_chain()):
        print(verify_chain())
        print('Blockchain was found invalid.')
        print(blockchain)
        waiting_for_input = False
        # break
    else:
        print('Blockchain is valid')
    print(blockchain)
    # print('Choice registered')

else: #Sim, elses podem ser USADOS TANTO EM WHILE LOOPS COMO EM FOR LOOPS... --> O ELSE CASE SEMPRE É EXECUTADO ___ DEPOIS __ DO FIM DO LOOP (whenever the loop is done)....
    print('User left')








ex:





1: Add a new transaction value
2: Display current blockchain
h: Manipulate the chain
q: Quit the program
------------------------------
Please choose an option: q
Blockchain is valid
[]
User left
PS A:\projeto7-PYTHON\MODULO3-TRABALHANDOCOMLOOPSECONDITIONALS\novoprojeto2>




































    --> OU SEJA,





    SERÁ OUTPUTTADO O ELSE CASE__ SEMPRE QUE __ o 


    LOOP PRINCIPAL TIVER ACABADO...















    ------> SÓ É EXECUTADO __ DEPOIS __ DA LOOP EXECUTION __ 

    ACABAR...












    --> PARA O FOR LOOP,

    O COMPORTAMENTO É O MESMO:









def output_blockchain():
    for block in blockchain:
        print('Outputting block')
        print(block)















        --> PODEMOS ESPECIFICAR O 'else' aqui....











--> VAMOS USAR AQUELE TRUQUE QUE APRENDEMOS MAIS CEDO,


DE ESCREVER 







print('-' * 20) ------> ISSO VAI PRINTAR 20 DASHES...








EX:








def output_blockchain():
    for block in blockchain:
        print('Outputting block')
        print(block)
    else:
        print('-' * 20)





















TIPO ASSIM:







def output_blockchain():
    for block in blockchain:
        print('Outputting block')
        print(block)
    else:
        print('-' * 20)












--> E ISSO FUNCIONOU....










--> VAI SER OUTPUTTADO ASSIM QUE __ O LOOP 'TIVER IDO POR DENTRO DE TODOS OS ELEMENTOS' de seu loop (no caso de 'for')...















--> É UMA FEATURE BOA,

QUE VOCÊ NÃO 
USA TANTO ASSIM,

MAS QUE PODE SER NICE SE VOCÊ TIVER ALGUM 'CLEANUP WORK',




OU ALGUM CÓDIGO QUE VOCÊ QUEIRA EXECUTAR ASSIM QUE VOCÊ TIVER ACABADO COM UM 


LOOP...