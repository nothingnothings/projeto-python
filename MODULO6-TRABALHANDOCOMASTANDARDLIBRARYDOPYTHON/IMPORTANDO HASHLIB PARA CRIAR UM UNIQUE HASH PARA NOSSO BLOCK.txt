












-> OK... 




NOSSO CÓDIGO ATUAL ESTÁ ASSIM:















from functools import reduce

owner = 'Arthur'

MINING_REWARD = 10



GENESIS_BLOCK = {
    'previous_ block_hash': '',
    'index': 0,
    'processed_transactions': []
}

blockchain = [GENESIS_BLOCK]


open_transactions = []


participants = {
    'Max'
}


# def get_last_blockchain_value():
#     """returns a blockchain"""
#     if(len(blockchain) > 0):
#         print('blockchain')
#         return blockchain[-1]
#     return None


def get_user_choice():
    """ Returns the input of the user (either 1, 2, h or q) to proceed with the options """
    user_input = input('Please choose an option: ')

    return user_input


def get_transaction_value():
    """ Returns the input of the user (sender, recipient, amount) as a tuple, to proceed with option 1 """

    user_transaction_sender = owner

    user_transaction_recipient = input("Please enter the recipient's name: ")
    if (user_transaction_recipient == '' or not isinstance(user_transaction_sender, str)):
        return None
    user_transaction_amount = input('Please enter transaction amount: ')
    if (user_transaction_amount == '' or not user_transaction_amount.isnumeric() or isinstance(user_transaction_amount, bool)):
        print('TEST')
        return None
    user_transaction_input = (
        user_transaction_sender, user_transaction_recipient, float(user_transaction_amount))
    return user_transaction_input


def add_transaction(sender, recipient, amount=1.0):
    """Faz append de uma NOVA TRANSACTION À LIST DE ' open_transactions, e aí RETORNA TRUE OU FALSE, a depender do sucesso de seu códiogo --> verification para ver se o user pode ou naõ realizar essa operação/send de coins...'....

        Arguments:
    :sender: o sender da transaction (nome ou id)   
    :recipient: o receiver da transaction (nome ou id)
    :amount: a quantidade (DEVE SER UM FLOAT). DEFAULT É 1.0 coin ...            
    """

    new_transaction = {

        'sender': sender,
        'recipient': recipient,
        'amount': amount
    }
    if not verify_transaction(new_transaction):
        print('Your funds are not enough for the chosen operation')
        return False
    else:
        open_transactions.append(new_transaction)
        participants.add(sender)
        participants.add(recipient)
        print(open_transactions)
        return True


def hash_block(block):
    return '-'.join([str(block[key]) for key in block])


def mine_block():
    """É essa função que PROCESSA NOSSAS OPEN TRANSACTIONS, PARA ENTÃO ADICIONAR UM NOVO BLOCK À BLOCKCHAIN """
    previous_block = blockchain[-1]
    hashed_block = hash_block(previous_block)
    # print(hashed_block)

    reward_transaction = {
        'sender': 'ourApp',
        'recipient': owner,
        'amount': MINING_REWARD

    }
    copied_transactions = open_transactions[:]
    copied_transactions.append(reward_transaction)
    block = {'previous_block_hash': hashed_block,
             'index': len(blockchain),
            #  'processed_transactions': open_transactions,
            'processed_transactions': copied_transactions
             }
    blockchain.append(block)
    print(blockchain, 'TRIED TO MINE BLOCK')
    return True


def output_blockchain():
    for block in blockchain:
        print('Outputting block')
        print(block)
    else:
        print('-' * 20)


def verify_chain():
    is_valid = True

    for (index, block) in enumerate(blockchain):

        if index == 0:
            continue
        if block['previous_block_hash'] == hash_block(blockchain[index - 1]):
            print('valid block')
        else:
            print('invalid block')
            is_valid = False
    return is_valid


def verify_transaction(transaction):
    """Retorna True ou False a DEPENDER DO CHECK DA TRANSACTION; SE O USER NÃO TIVER FUNDS SUFICIENTES, RETORNA FALSE E A OPERAÇÃO/TRANSACTION NÃO É REALIZADA. É chamado lá em 'add_transaction()'.."""
    sender_balance = get_balance(transaction['sender'])[2]
    print(sender_balance)
    return sender_balance >= transaction['amount']


def get_value(person):
        return [[transaction['amount'] for transaction in block['processed_transactions'] if transaction[person] == owner] for block in blockchain]


# def get_balance(participant): #versão SEM O USO DA FUNCTION DE '.reduce' NA NOSSA LIST....
#     transaction_sender = get_value('sender')
#     open_transactions_sender = [transaction['amount'] for transaction in open_transactions if transaction['sender'] == participant]
#     transaction_sender.append(open_transactions_sender)
#     print(transaction_sender)

#     amount_sent = 0
#     for tx in transaction_sender:
#         if len(tx) > 0:
#             amount_sent += tx[0]
#     transaction_recipient = get_value('recipient')
#     amount_received = 0
#     for tx in transaction_recipient:
#         if len(tx) > 0:
#             amount_received += tx[0]
#     return (amount_sent, amount_received, amount_received - amount_sent)




def get_balance(participant): #versão COM O USO DE REDUCE NA NOSSA LIST...
    transaction_sender = get_value('sender')
    open_transactions_sender = [transaction['amount'] for transaction in open_transactions if transaction['sender'] == participant]
    transaction_sender.append(open_transactions_sender)

    # amount_sent = 0
    # for tx in transaction_sender:
    #     if len(tx) > 0:
    #         amount_sent += tx[0]
    print(transaction_sender[0])

    # def reduce_function(curValue, lastResult):
    #     print(curValue, lastResult)
    #     if len(curValue) > 0:
    #         return curValue + lastResult
       

    print(transaction_sender)

    # amount_sent = reduce(reduce_function, transaction_sender)
    # amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + tx_amt[0] if len(tx_amt) > 0 else 0, transaction_sender, 0)   #function a ser executada, LIST EM QUE EXECUTAR ESSA FUNCTION, e, por fim, o INDEX DO VALUE/ELEMENTO PELO QUAL QUEREMOS COMEÇAR O 'SUM UP'...
    # amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + reduce(lambda x,y: x+y, tx_amt) if len(tx_amt) > 0 else 0, transaction_sender, 0) #sem o uso da CONVENIENCE FUNCTION DE 'sum()'

    amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum + 0, transaction_sender, 0) #COM USO DA CONVENIENCE FUNCTION DE 'sum()'...
                #obs: TERNARY EXPRESSIONS FUNCIONAM COM LAMBDA FUNCTIONS, MAS IF STATEMENTS, NAõ... ----> MAS TERNARY EXPRESSIONS TAMBÉM USAM 'if', no python....
    
    
    print(amount_sent)
   
    transaction_recipient = get_value('recipient')
    # amount_received = 0
    # for tx in transaction_recipient:
    #     if len(tx) > 0:
    #         amount_received += tx[0]

    # amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + tx_amt[0] if len(tx_amt) > 0 else 0, transaction_recipient, 0)
    amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum + 0, transaction_recipient, 0) 
    print(amount_received)
    return (amount_sent, amount_received, amount_received - amount_sent)




# def get_balance(participant):
#     """Calculate and return the balance for a participant.

#     Arguments:
#         :participant: The person for whom to calculate the balance.
#     """
#     # Fetch a list of all sent coin amounts for the given person (empty lists are returned if the person was NOT the sender)
#     # This fetches sent amounts of transactions that were already included in blocks of the blockchain
#     tx_sender = [[tx['amount'] for tx in block['processed_transactions'] if tx['sender'] == participant] for block in blockchain]
#     # Fetch a list of all sent coin amounts for the given person (empty lists are returned if the person was NOT the sender)
#     # This fetches sent amounts of open transactions (to avoid double spending)
#     open_tx_sender = [tx['amount'] for tx in open_transactions if tx['sender'] == participant]
#     tx_sender.append(open_tx_sender)
#     print(tx_sender)
#     amount_sent = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum + 0, tx_sender, 0)
#     # This fetches received coin amounts of transactions that were already included in blocks of the blockchain
#     # We ignore open transactions here because you shouldn't be able to spend coins before the transaction was confirmed + included in a block
#     tx_recipient = [[tx['amount'] for tx in block['processed_transactions'] if tx['recipient'] == participant] for block in blockchain]
#     amount_received = reduce(lambda tx_sum, tx_amt: tx_sum + sum(tx_amt) if len(tx_amt) > 0 else tx_sum + 0, tx_recipient, 0)
#     # Return the total balance
#     return (amount_sent, amount_received, amount_received - amount_sent)





# def verify_transactions(): #versão sem ser 1 LINHA SÓ...
#     transactions_to_verify = []
#     for transaction in open_transactions:
#         transaction_is_valid = verify_transaction(transaction)
#         transactions_to_verify.append(transaction_is_valid)
#     # print(transactions_to_verify)
#     if transactions_to_verify == []:
#         return None
#     return all(transactions_to_verify)



def verify_transactions():
    #return all([True, True, True, False])  --> acaba resolvido para 'False'...
    if open_transactions == []:
        return None
    else:
        return all([verify_transaction(transaction) for transaction in open_transactions]) #exemplo de uso de LIST COMPREHENSION COM __ BOOLEAN OPERATORS (verify_transaction(transaction), que é true ou false) __ COM __ ANY()/ALL() (retorna true ou false a partir da existência/inexistência de 'false' nessa list aí)...







waiting_for_input = True


while waiting_for_input:
    print('-' * 30)
    print('1: Add a new transaction value')
    print('2: Display current blockchain')
    print('3: Show participants')
    print("b: Show user's balance")
    print('h: Manipulate the chain')
    print('m: Mine a block')
    print('q: Quit the program')
    print('v: Verify open transactions')
    print('-' * 30)
    user_input = get_user_choice()
    if(user_input == '1'):
        user_transaction = get_transaction_value()

        if(user_transaction == None):
            print('Please enter a valid sender, recipient and transaction value.')
        else:
            sender, recipient, amount = user_transaction
            if add_transaction(sender, recipient, amount):
                print('Added transaction!')
            else:
                print('Transaction failed')

    elif(user_input == '2'):
        output_blockchain()
    elif(user_input == 'q'):
        waiting_for_input = False

    elif(user_input == 'h'):
        print(blockchain)
        elementIndex = input(
            'Enter the number of the element you want to manipulate: ')
        if (elementIndex.isnumeric()):
            if (len(blockchain) >= int(elementIndex) + 1):
                elementValue = input(
                    ' Please Enter the value you want to insert: ')
                blockchain[int(elementIndex)]['processed_transactions'] = [
                    {'sender': 'test', 'recipient': 'tested', 'amount': 1212}]
            else:
                print(
                    'No block for that index, please insert sufficient number of blocks before trying to manipulate a specific one')
        else:
            print('Invalid index entered, please try again')

    elif(user_input == 'm'):

        if mine_block():
            print(' MINED')
            open_transactions = []
    elif(user_input == '3'):
        print(participants)
    elif(user_input == 'b'):
        sent, received, balance = get_balance(owner)
        # print('Blocks sent: ' + str(sent))
        # print('Blocks received: ' + str(received))
        # print('Total Balance: ' + str(balance))
        # print(f'Blocks sent by {owner}: ' + str(sent))
        # print(f'Blocks received by {owner}: ' + str(received))
        # print(f'Total Balance of {owner}: ' + str(balance))
        print(f'Blocks sent by {owner}: '+ '{sent:>6.2f}'.format(sent=sent))
        print(f'Blocks received by {owner}: '+ '{received:>6.2f}'.format(received=received))
        print(f'Total Balance of {owner}: '+ '{balance:>6.2f}'.format(balance=balance))
    elif(user_input == 'v'):
        if (verify_transactions()):
            print('Transactions are valid.')
        elif(verify_transactions() == None):
            print('No transactions to verify, please add a transaction.')
        else:
            print('Invalid transactions detected.')
    else:
        print('-' * 40)
        print('Invalid command, please input 1, 2 or q.')
    if(not verify_chain()):

        print('Blockchain was found invalid.')
        print(blockchain)
        waiting_for_input = False

    else:
        print('Blockchain is valid')


else:
    print('User left')
























--> AGORA QUEREMOS IMPORTAR A PACKAGE DE 'hashlib' 


para que 


SEJA POSSÍVEL 


CONVERTER 

O 


CONTEÚDO DE NOSSO BLOCK EM UMA HASH, STRING ENCRIPTADA...






--> VAMOS COLOCAR SUA LÓGICA LÁ NA FUNCTION DE 'hash_block():
'















--> A PACKAGE DE hashlib 
TEM BASTANTE 


METHODS,

COMO 

'md5'...










A LÓGICA DE HASH_BLOCK, ATÉ AGORA, ESTÁ ASSIM:


def hash_block(block):
    return '-'.join([str(block[key]) for key in block])















    -->    ESSA LÓGICA ESTÁ 


    CONVERTENDO TODAS AS DIFERENTES FEATURES DE NOSSO BLOCK EM 1 STRING,
    E AÍ 


    AS JOINANDO TUDO 



    EM 1 ÚNICA STRING .. --> essa é uam forma 




    DE CRIAR 


    1 

    HASH,

    MAS 



    ESSE 

    HASH 
    É 

    'CLEARLY READABLE ' -->  E AÍ FICA FÁCIL DE SABER COMO 

    SEU 



    BLOCK 


    VAI SE PARECER _ POR _ MEIO _ DA MERA OBSERVAÇÃO  DO HASH ___ --> ISSO, POR SI SÓ,



    NÃO É UMA SECURITY ISSUE TÃO GRAVE,


    MAS É CLARO QUE SERIA BEM MAIS NICE 


    SE TIVÉSSEMOS 






    ___ UM HASH__ QUE SEMPRE __ TERÁ O MESMO 'HASH VALUE' PARA O MESMO INPUTK,


     
     MAS QUE __ NÃO PODERÁ 


     SER __ TRADUZIDO _ 


     DE 


     VOLTA PARA O VALOR ORIGINAL (vocÊ precisaria de uma HASH TABLE,



     EM QUE 

     VOCÊ 

     SSABERIA _ QUAL FOI O OUTPUT __ E QUAL FOI O HASH UTILIZADO PARA CONVERTER DESSA FORMA...
     
     
     
     )












     --> NÃO É POSSÍVEL FAZER 


     O REVERSE ENGINEER DE UMA HASH POR CONTA PRÓOPRIA, É IMPOSSÍVEL..









     --> ALÉM DISSO, HASHES SÃO SEMPRE menores DO QUE O CONCATENATE DE DADOS PARAA CRIAR UMA 'PSEUDOHASH'...











    ---> É CLARO QUE ISSO SERÁ MAIS SEGURO,


    PQ O HASH NÃO VAI ENTREGAR NENHUMA INFO ACERCA DO BLOCK..










    --> PARA CRIAR UM HASH DESSES,






    PRECISAMOS IMPORTAR OUTRA PACKAGE DO PYTHON,

    QUE É 

    A 'hashlib'...















    import hashlib 













--> ESSA LIBRARY TEM UM MONTE DE METHODS QUE NOS AJUDAM A CRIAR HASHES -> ISSO PQ OS HACKING 


ALGORITHMS 



NÃO SÃO ALGORITMOS QUE QEUREMOS ESCREVER POR CONTA PRÓPRIA... -_> COM O HASHLIB 

IMPORTADO,

O 
QUE 

PODEMOS 

FAZER 

NA FUNCTION DE HASHLIB 



é,

 em vez 

 de 

 retornar aquele 'custom hash' nossoo,



 NÓS SIMPLESMENTE RETONRAMSO 




 'hashlib.xxx' 








 -> VAMOS USAR O METHOD DE 


 'sha256',












 __ QUE __ USA_ 

 'sha256' HASHING ------> ESSE É SIMPLESMENTE UM ALGORITMO QUE 



 CRIA UM HASH 
 DE 


 64  CARACTERES.. --> 













 COMO MENCIONADO ANTERIORMENTE,



 ESSE METHOD VAI ASSEGURAR QUE 'O  MESMO INPUT SEMPRE LEVARÁ AO MESMO HASH'...












 --> É CLARO QUE ISSO É SUPER IMPORTANTE A NÓS,


 PQ 


 PRECISAMOS SER  CAPAZES  ___ DE __ 'RECALCULATE THE HASH' 


 PARA CONSEGUIRMOS 'VALIDATE '




 O PREVIOUS HASH DE UM BLOCK.... ----> PQ É ISSO QUE ESTAMOS 


 FAZENDO 



 NA 


 NOSSA FUNCTION de verify,





VERIFICANDO SE O VALOR DO BLOCK ANTIGO INTEIRO, HASHEADO, É IGUAL AO VALOR QUE TEMOS ARMAZENADO EM 'previous_block_hash'...











OK, A ESSE METHOD PASSAMOS O VALOR QUE  QUEREMOS HASHEAR..










--> E O VALOR QUYE VACMOS QUERER 



HASHEAR 

SERÁ UMA __ STRING...  ------> VAMOS QUERER PASSAR O BLOCK, MAS O BLOCK É UM __ DICTIONARY__ .... - >






PARA CONVERTER O BLOCK, QUE É UMA DICTIONARY, EM UMA STRING,





PODERÍAMOS USAR DICT COMPREHENSION... --> MAS EM VEZ DISSO,

O PROFESSOR 

VAI 


TIRAR 
VANTAGEM DE OUTRA LIBRARY,

QUE 
É 

A 
LBIRARY 










DE 




'json'.... ---------> BEM, JSON É UM FORMATO DE DATA __ ESPECIAL_....












---> E SE VOCÊ PRESTOU ATENÇÃO ATÉ AGORA,

O 

FORMATO 


DE 






DICTIONARIES É BEM SIMILAR A 





ESTRUTURAS JSON...












-------> O JSON VEM DO MUNDO JAVASCRIPT, E É A MANEIRA DE __ CONCATENAR__ 




OBJETOS JAVASCRIPT E OUTRAS COISAS __ COMO STRINGS...













--> É POR ISSO QUE É UMA BOA IDEIA __ TRANSFORMAR __ NOSSO DICT _ EM JSON DATA,

PARA 

AÍ 

PASSAR 

A
 

 ESSE 





 METHOD DE 



 hashlib.sha256().









TALVEZ O CÓDIGO FIQUE ASSIM:





def hash_block(block):
    # return '-'.join([str(block[key]) for key in block]) #hash custom criado por nós, não é tão bom (é inseguro, é readable, simples concatenate de strings representando os valores em nossos blocks)...
    hashlib.sha256(json.encoder(block))   #HASH ALGORITHM de 'sha256', que converte seu value em um HASH DE 64 CARACTERES...  --> o mesmo input SEMPRE LEVARÁ AO  MESMO HASH OUTPUTTADO... --> isso é super importante para nós, pq PRECISAMOS SER CAPAZES DE 'RECALCULATE THE HASH' PARA VALIDAR O PREVIOUS HASH DE UM BLOCK...
                        # esse method EXIGE __ que vocÊ passe uma STRING --> vamos passar nosso BLOCK CONVERTIDO EM JSON, pq JSON É UMA STRING, NA VERDADE....









--------------------------------------


















O FORMATO JSON É ASSIM:


{
    "field": "value",
    "field1": [

    ]
}













--> TUDO ISSO É ENCODADO COMO UMA STRING....








-> A JSON PACKAGE, NO PYTHON, É CAPAZ 
DE 


ACEITAR DICTIONARIES E _ _ENTAÕ OS _ CONVERTER COMO UMA STRING ÚNICA....










--> MAAS APARENTEMENTE NAÕ É O METHOD de 'json.encode'

QUE USAREMOS,

E 

SIM 
o 


'json.dumps'...












DUMPS -> Serialize obj to a JSON formatted str.












--> OK, PASSAMOS O BLOCK, TIPO ASSIM....










--> ISSO VAI CRIAR UMA STRING,



sim, MAS SOMOS __ OBRIGADOS_ A CHAMAR 





aquele method de antes,



'.encode()',

PARA 



ENCODAR ESSA STRING EM UM FORMATO UTF8 UTILIZÁVEL...













--> ISSO PQ O FORMATO sha256 ACEITA ESSE FORMATO UTF8....







EX:










def hash_block(block):
    # return '-'.join([str(block[key]) for key in block]) #hash custom criado por nós, não é tão bom (é inseguro, é readable, simples concatenate de strings representando os valores em nossos blocks)...
    hashlib.sha256(json.dumps(block).encode())   #HASH ALGORITHM de 'sha256', que converte seu value em um HASH DE 64 CARACTERES...  --> o mesmo input SEMPRE LEVARÁ AO  MESMO HASH OUTPUTTADO... --> isso é super importante para nós, pq PRECISAMOS SER CAPAZES DE 'RECALCULATE THE HASH' PARA VALIDAR O PREVIOUS HASH DE UM BLOCK...
                        # esse method EXIGE __ que vocÊ passe uma STRING --> vamos passar nosso BLOCK CONVERTIDO EM JSON, pq JSON É UMA STRING, NA VERDADE....
                        # json --> tem esse method de 'dumps', que CONVERTE UM DICT PYTHON EM UMA LONGA STRING... -> mas essa string não é retornada em um formato utilizável, por isso usamos o method de '.encode' PARA converter isso em um FORMATO UTF8, utilizável pelo 'sha256' do hashlib....
















------->     hashlib.sha256(json.dumps(block).encode()) 
















-> O PROFESSOR DIZ QUE ISSO É UJMA _ STRING,
MAS 

ISSO 


NÃO ESTÁ 100% CORRETO ... --> O QUE É OUTPUTTADO AQUI É 

UMA 

'BINARY STRING'... ---> BINARY STRINGS 


POSSUEM 





'BINARY CHARACTERS',

QUE 

SÃO 

CARACTERES 
QUE 

NÃO 

SÃO 

NECESSARIAMENTE 'PRINTABLE '---> isso quer dizer que 



ELES NÃO SÃO LEGÍVEIS POR HUAMNOS ,



E SIM APENAS PELO COMPUTADOR ... --> BINARY DATA ESTÁ POR TODA PARTE, até em images ... -> E VOCÊ PRECISA 




DESSE 'BINARY TEXT'

PARA 

QUE 

O 


ALGORITMO DE 


'sha256'



CONSIGA FUNCIONAR.....










--> OK, AGORA ESTAMOS CONSEGUINDO CRIAR UM VALOR HASH  A PARTIR DESSE BLOCK...
















---> OK, MAS AQUI HÁ MAIS UMA COISA QUE TEMOS DE SABER:





ESSE 'HASH' QUE É GERADO AQUI __ NÃO É PROPRIAMENTE UMA STRING,

E SIM 


_ UM ___ BYTE__....













--> PARA CONVERTER UM __ BYTE__ EM UMA NORMAL STRING,





DEVEMOS OBRIGATORIAMENTE USAR O METHOD DE 


'hexdigest()'









SOBRE O RESULTADO dessa operação de sha256....












--> OK, O HASH SERÁ RETORANDO COMO UMA NOVA STRING....









-----> AÍ USAMOS ESSE ALGORITMO,

E AÍ TESTAMOS 

PARA 

VER O QUE ELE NOS RETORNA...












BEM, O QUE ELE NOS RETORNOU FOI ISTO:



a63b527d0cf682f948518fa3eaf1d0e9fdd81164b3d83de733d58927a2f1058b 













-> E AÍ, DENTRO DOS BLOCKS, ISTO:


[{'previous_ block_hash': '', 'index': 0, 'processed_transactions': []}, {'previous_block_hash': 'a63b527d0cf682f948518fa3eaf1d0e9fdd81164b3d83de733d58927a2f1058b', 'index': 1, 'processed_transactions': [{'sender': 'ourApp', 'recipient': 'Arthur', 'amount': 10}]}] 





--------------------------------










OK... COMO VOCÊ PODE VER,






É UM HASH DE 64 CARACTERES.... --> E, NISSO AÍ,

O 






_ MESMO INPUT SEMPRE LEVARÁ AO MESMO OUTPUT -> ISSO QUER DIZER QUE ISSO NÃO 


É 
UM 


NÚMERO  ALEATÓRIO,


É 

DETERMINÍSTICO,



MAS A VANTAGEM É QUE É ILEGÍVEL, 

NAÕ É 
POSSÍVEL FAZER 


REVERSE-ENGINEERING...  --> TEMOS QUE SABER QUAL FOI O BLOCK ANTIGO PARA SERMOS CAPAZES DE 


GANHAR ESSE OUTPUT DE NOVO.... (esse hash de novo)..














-->  OK, AGORA TEMOS 

UMA MANEIRA MELHOR DE CRIAR O HASH,


TUDO USANDO A STANDARD LIBRARY...











-> OK, MAS HÁ UMA COISA QUE O PROFESSOR QUER QUE SAIBAMOS:








O 'HASHED BLOCK' value criado a partir de um block 



CONTÉM TODA A INFO QUE EXISTIA EM UM __ BLOCK,

INCLUINDO/INCLUSIVE 

A 

DATA 


 

 QUE EXISTIA/EXISTIU NOS 


 BLOCKS 

 ANTERIORES... -----> 












 É POR ISSO QUE SE ALTERÁSSEMOS ALGUM BLOCK,


 O PRÓXIMO BLOCK 


 NA CHAIN VAI FALHAJR.... ------> OK... MAS _ ESSE MECANISMO _DE 


 SEGURANÇA SÓ SE TORNA __ ULTRA SEGURO __ QUANDO ADICIONAMOS OUTRO MECANISMO __ CORE__ 



 DA BLOCKCHAIN,

 QUE EXISTE NO SEU CORAÇÃO,

 QUE É 


 O 

 PROOF OF WORK.... (coisas como bitcoin usam)..












 -> MAS ANTES DE VERMOS O PROOF OF WORK,

 DEVEMOS REVISITAR NOSSOS IMPORTS E VER OUTRAS SINTAXES DE IMPORT QUE PODEMOS USAR..