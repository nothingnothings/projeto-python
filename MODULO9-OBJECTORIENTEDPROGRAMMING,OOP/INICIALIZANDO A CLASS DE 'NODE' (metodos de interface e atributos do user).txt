













-> JÁ ADICIONAMOS 3 CLASSES.... 










--> a class de BLOCK, A DE TRANSACTION E A DE 'UTILITY' (verification)...









-> AGORA RESTAM AS CLASSES DE 'Blockchain' 

e
 

 de 

 'Node'...









--> node --> É A CLASS DE USER INTERFACE ... ------> 










O PROFESSOR CHAMA DE 'node' 


PQ __ MAIS TARDE__ REALMENTE_ VAMOS CONECTAR ESSA 

CLASS AÍ __ VIA HTTP...













--> de volta ao nosso projeto,


criamos o arquivo 'node.py'....











-----> LÁ NO ARQUIVO 'blockchain.py'



O QUE VAMOS QUERER COLOCAR, ESSENCIALMENTE,


É 

AQUELE CÓDIGO DE 'INTERAÇÃO' ---> o while loop
 


 E TODAS AS 




 FUNCTIONS 




 RELACIONADAS COM O GET DE USER INPUT...












 ---> é por isso que em 'node.py' 


 o professor escreve:















 class Node:











 --> E AÍ ELE ADICIONA O PRIMEIRO METHOD, 'listen_for_input()',


 QUE VAI COMEÇAR O NOSSO WHILE LOOP...









 -------> tipo assim:








 

 class Node:


def listen_for_input():
















----> AÍ O PROFESSOR VAI SER BEM PORCÃO,

VAI PEGAR TODO O 




WHILE LOOP E INSERIR DENTRO DESSE METHOD...




tipo assim:







class Node:
    def listen_for_input():
        waiting for input = True

        while waiting_for_input:
            print('-' * 30)
            print('1: Add a new transaction value')
            print('2: Display current blockchain')
            print('3: Show participants')
            print("b: Show user's balance")
            print('h: Manipulate the chain')
            print('m: Mine a block')
            print('q: Quit the program')
            print('v: Verify open transactions')
            print('-' * 30)
            user_input = get_user_choice()
            if(user_input == '1'):
                user_transaction = get_transaction_value()

                if(user_transaction == None):
                    print('Please enter a valid sender, recipient and transaction value.')
                else:
                    sender, recipient, amount = user_transaction
                    if add_transaction(sender, recipient, amount):
                        print('Added transaction!')
                    else:
                        print('Transaction failed')

            elif(user_input == '2'):
                output_blockchain()
            elif(user_input == 'q'):
                waiting_for_input = False

            elif(user_input == 'h'):
                print(blockchain)
                elementIndex = input(
                    'Enter the number of the element you want to manipulate: ')
                if (elementIndex.isnumeric()):
                    if (len(blockchain) >= int(elementIndex) + 1):
                        elementValue = input(
                            ' Please Enter the value you want to insert: ')
                        blockchain[int(elementIndex)]['processed_transactions'] = [
                            {'sender': 'test', 'recipient': 'tested', 'amount': 1212}]
                    else:
                        print(
                            'No block for that index, please insert sufficient number of blocks before trying to manipulate a specific one')
                else:
                    print('Invalid index entered, please try again')

            elif(user_input == 'm'):
                if mine_block():
                    print(' MINED')
                    open_transactions = []
                    save_data() #código pertinente ---> salva no nosso filesystem, no nosso arquivo 'blockchain.txt', o BLOCKCHAIN E OPEN_tRANSACTIONS ATUAIS..
            elif(user_input == '3'):
                print(participants)
            elif(user_input == 'b'):
                sent, received, balance = get_balance(OWNER)
                print(f'Blocks sent by {OWNER}: ' + '{sent:>6.2f}'.format(sent=sent))
                print(f'Blocks received by {OWNER}: ' +
                    '{received:>6.2f}'.format(received=received))
                print(f'Total Balance of {OWNER}: ' +
                    '{balance:>6.2f}'.format(balance=balance))
            elif(user_input == 'v'):
                # if (verify_transactions()):
                # if (Utility.verify_transactions(open_transactions, get_balance(OWNER))):
                new_utility = Utility()
                if (new_utility.verify_transactions(open_transactions, get_balance(OWNER))):
                    print('Transactions are valid.')
                # elif(verify_transactions() == None):
                elif(new_utility.verify_transactions(open_transactions, get_balance(OWNER)) == None):
                    print('No transactions to verify, please add a transaction.')
                else:
                    print('Invalid transactions detected.') 
            else:
                print('-' * 40)
                print('Invalid command.')
            # if(not verify_chain()):
            new_utility = Utility()
            if(not new_utility.verify_chain(blockchain)):
                print('Blockchain was found invalid.')
                print(blockchain)
                waiting_for_input = False
            else:
                print('Blockchain is valid')
        else:
            print('User left')





------------------------------------









com isso, de volta ao blockchain,











PRECISAMOS PEGAR AQUELAS 3 FUNCTIONS RELACIONADAS AO 'GET USER INPUT',

que são:














def get_user_choice():
    """ Returns the input of the user (either 1, 2, h or q) to proceed with the options """
    user_input = input('Please choose an option: ')

    return user_input

def get_transaction_value():
    """ Returns the input of the user (sender, recipient, amount) as a tuple, to proceed with option 1 """

    user_transaction_sender = OWNER

    user_transaction_recipient = input("Please enter the recipient's name: ")
    if (user_transaction_recipient == '' or not isinstance(user_transaction_sender, str)):
        return None
    user_transaction_amount = input('Please enter transaction amount: ')
    if (user_transaction_amount == '' or not user_transaction_amount.isnumeric() or isinstance(user_transaction_amount, bool)):
        print('TEST')
        return None
    user_transaction_input = (
        user_transaction_sender, user_transaction_recipient, float(user_transaction_amount))
    return user_transaction_input

def output_blockchain():
    for block in blockchain:
        print('Outputting block')
        print(block)









-----------------












------->>>>>>>>>>>>>  vamos receberr um monte de erros nos methods, temos que adicionar 'self' em todos seus parametros....















CONSERTEI VÁRIOS DOS PROBLEMAS, E FICOU ASSIM:



















class Node:
    def listen_for_input(self):
        waiting_for_input = True

        while waiting_for_input:
            print('-' * 30)
            print('1: Add a new transaction value')
            print('2: Display current blockchain')
            print('3: Show participants')
            print("b: Show user's balance")
            print('h: Manipulate the chain')
            print('m: Mine a block')
            print('q: Quit the program')
            print('v: Verify open transactions')
            print('-' * 30)
            user_input = self.get_user_choice()
            if(user_input == '1'):
                user_transaction = self.get_transaction_value()

                if(user_transaction == None):
                    print(
                        'Please enter a valid sender, recipient and transaction value.')
                else:
                    sender, recipient, amount = user_transaction
                    if add_transaction(sender, recipient, amount):
                        print('Added transaction!')
                    else:
                        print('Transaction failed')

            elif(user_input == '2'):
                self.output_blockchain()
            elif(user_input == 'q'):
                waiting_for_input = False

            elif(user_input == 'h'):
                print(blockchain)
                elementIndex = input(
                    'Enter the number of the element you want to manipulate: ')
                if (elementIndex.isnumeric()):
                    if (len(blockchain) >= int(elementIndex) + 1):
                        elementValue = input(
                            ' Please Enter the value you want to insert: ')
                        blockchain[int(elementIndex)]['processed_transactions'] = [
                            {'sender': 'test', 'recipient': 'tested', 'amount': 1212}]
                    else:
                        print(
                            'No block for that index, please insert sufficient number of blocks before trying to manipulate a specific one')
                else:
                    print('Invalid index entered, please try again')

            elif(user_input == 'm'):
                if mine_block():
                    print(' MINED')
                    open_transactions = []
                    # código pertinente ---> salva no nosso filesystem, no nosso arquivo 'blockchain.txt', o BLOCKCHAIN E OPEN_tRANSACTIONS ATUAIS..
                    save_data()
            elif(user_input == '3'):
                print(participants)
            elif(user_input == 'b'):
                sent, received, balance = get_balance(OWNER)
                print(f'Blocks sent by {OWNER}: ' +
                      '{sent:>6.2f}'.format(sent=sent))
                print(f'Blocks received by {OWNER}: ' +
                      '{received:>6.2f}'.format(received=received))
                print(f'Total Balance of {OWNER}: ' +
                      '{balance:>6.2f}'.format(balance=balance))
            elif(user_input == 'v'):
                # if (verify_transactions()):
                # if (Utility.verify_transactions(open_transactions, get_balance(OWNER))):
                new_utility = Utility()
                if (new_utility.verify_transactions(open_transactions, get_balance(OWNER))):
                    print('Transactions are valid.')
                # elif(verify_transactions() == None):
                elif(new_utility.verify_transactions(open_transactions, get_balance(OWNER)) == None):
                    print('No transactions to verify, please add a transaction.')
                else:
                    print('Invalid transactions detected.')
            else:
                print('-' * 40)
                print('Invalid command.')
            # if(not verify_chain()):
            new_utility = Utility()
            if(not new_utility.verify_chain(blockchain)):
                print('Blockchain was found invalid.')
                print(blockchain)
                waiting_for_input = False
            else:
                print('Blockchain is valid')
        else:
            print('User left')

    def get_user_choice(self):
        """ Returns the input of the user (either 1, 2, h or q) to proceed with the options """
        user_input = input('Please choose an option: ')

        return user_input

    def get_transaction_value(self):
        """ Returns the input of the user (sender, recipient, amount) as a tuple, to proceed with option 1 """

        user_transaction_sender = OWNER

        user_transaction_recipient = input(
            "Please enter the recipient's name: ")
        if (user_transaction_recipient == '' or not isinstance(user_transaction_sender, str)):
            return None
        user_transaction_amount = input('Please enter transaction amount: ')
        if (user_transaction_amount == '' or not user_transaction_amount.isnumeric() or isinstance(user_transaction_amount, bool)):
            print('TEST')
            return None
        user_transaction_input = (
            user_transaction_sender, user_transaction_recipient, float(user_transaction_amount))
        return user_transaction_input

    def output_blockchain(self):
        for block in blockchain:
            print('Outputting block')
            print(block)










--------------------------------------
















mas methods como 'output_blockchain'



VAO FALHAR,










PQ NÃO TEMOS ACESSO à BLOCKCHAIN mais..









--> é por isso que colocamos que esse  method vai ESPERAR A BLOCKCHAIN COMO UM ARGUMENTo...










--> MAS O PROFESSOR ARGUMENTA QUE 'blockchain' NÃO DEVERÁ SER UM ARGUMENTO DESSE METHOD EM ESPECÍFICO,

E SIM _ UM __ ATTRIBUTE__ DESSE OBJETO 'node' EM GERAL...











--> FAÇO TIPO ASSIM:




    def __init__(self, blockchain):
        self.blockchain = blockchain














---> ok.... e aí substitua todas as partes  do código que possuem essa referência....








--> faz mais sentido que 'blockchain' 












será um __ ATTRIBUTE DESSA NOSSA CLASS 'node'..














--> eu havia escrito assim:







    def __init__(self, blockchain):
        self.blockchain = blockchain











----> MAS O PROFESSOR NOS EXPLICA QUE HÁ MAIOR SENTIDO 


se 




definirmos a blockchain como uma LIST,

OU __ ENTÃO _ COMO UM _ 

OBJECT..


tipo assim:







    def __init__(self):
        self.blockchain = []










OU ASSIM:









    def __init__(self):
        self.blockchain = Blockchain()














----> MAS ANTES DE CONSEGUIRMOS FAZER ISSO, INSTANCIAR UM objeto 'Blockchain'

AQUI,



_ VAMOS _ PRECISAR _ 






_ DE UMA CLASS BLOCKCHAIN..











----> POR ISSO DEEVMOS IGNORAR 





TODAS AS COISAS QUE ENVOLVEM 'blockchain', por enquanto...














------> na próxima aula, vamos 


CRIAR A CLASS DE 'BLOCKCHAIN'...










---> VAMOS USAR ESSA CLASS DE BLOCKCHAIN PARA CRIAR UM OBJECT 'BLOCKCHAIN' 

que 



SERÁ ENTÃO 
ARMAZENADA EM UM ATTRIBUTE DESSE 'node'...










--> PQ COMO O PROFESSOR MENCIONOU ANTERIORMENTE,


CADA NODE 

É ___ APENAS UM COMPUTADOR COM UMA PRÓPRIA INSTANCE DE 'node',


que pode minerar e enviar transactions, etc... --> É POR ISSO QUE 

FAZ SENTIDO 




CRIARMOS UMA __ CLASS DE 'node' COM UMA BLOCKCHAIN (object) ANEXADA A ELA...